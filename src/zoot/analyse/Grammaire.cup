package zoot.analyse ;

import java.util.*;
import zoot.arbre.* ;
import zoot.arbre.expressions.* ;
import zoot.arbre.instructions.* ;
import zoot.exceptions.AnalyseSyntaxiqueException;
import zoot.arbre.tableDeSymboles.*;

import java_cup.runtime.*;

action code {:
             :} ;

parser code {:

    public void report_error(String message, Object info) {

        HashMap<Integer, String> lesTerminaux = new HashMap<>() ;

        lesTerminaux.put(new Integer(CodesLexicaux.DEBUT), "debut") ;
        lesTerminaux.put(new Integer(CodesLexicaux.FIN), "fin") ;
        lesTerminaux.put(new Integer(CodesLexicaux.POINTVIRGULE), ";") ;

        StringBuffer m = new StringBuffer() ;

        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            if (s.left >= 0) {                
                m.append("\tligne : " + (s.left + 1)) ;
                if (s.right >= 0)                    
                    m.append(" colonne : " + (s.right+1)) ;
            }
            
            if (s.value != null) {
                lesTerminaux.put(CodesLexicaux.CSTENTIERE, "" + s.value) ;
            }

            if (lesTerminaux.containsKey(new Integer(s.sym))) {
                m.append(" dernier token lu : " + lesTerminaux.get(new Integer(s.sym))) ;
            }
            else {
                m.append(" expression non termin√©e") ;
            }

        }
        throw new AnalyseSyntaxiqueException("" + m) ;
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
    }
:};
   
/* ------------Declaration of Terminals and Non Terminals Section----------- */
   
/* Terminals (tokens returned by the scanner).  */

terminal Symbol    DEBUT, FIN, VARIABLES , FONCTIONS, POINTVIRGULE, ECRIRE, EGAL , POUVRANTE , PFERMANTE, RETOURNE ;
terminal String    CSTENTIERE, IDF, CSTBOOLEEN, ENTIER, BOOLEEN ;
   
/* Non terminals used in the grammar section.  */

non terminal ArbreAbstrait PROG , LINST , LDCL , DCL , PARAM , LFONC , FONC ;
non terminal Instruction INST ;
non terminal Expression EXP ;
non terminal String TYPE ;

/* ----------------------------Grammar Section-------------------- */
 
start with PROG ;

PROG    ::=     VARIABLES LDCL:lv FONCTIONS LFONC:lf DEBUT LINST:li FIN
                {: RESULT = li ; :}
                |
                VARIABLES LDCL:lv DEBUT LINST:li FIN
                {: RESULT = li ; :}
                ;


LFONC   ::=     LFONC:lf FONC:f
                {: ((BlocDInstructions)lf).ajouter(f) ;
                RESULT = lf ; :}
                |
                FONC:f
                {: BlocDInstructions b = new BlocDInstructions(fleft + 1) ;
                b.ajouter(f) ;
                RESULT = b ; :}
                ;


LDCL    ::=     LDCL:lv DCL:v
                {: ((BlocDInstructions)lv).ajouter(v) ;
                    RESULT = lv ; :}
                |
                DCL:v
                {: BlocDInstructions b = new BlocDInstructions(vleft + 1) ;
                   b.ajouter(v) ;
                   RESULT = b ; :}
                ;


LINST   ::=     LINST:li  INST:i
                {: ((BlocDInstructions)li).ajouter(i) ;
                   RESULT = li ; :}
                |
                INST:i
                {: BlocDInstructions b = new BlocDInstructions(ileft + 1) ;
                   b.ajouter(i) ;
                   RESULT = b ; :}
                ;


INST    ::=     ECRIRE EXP:e POINTVIRGULE
                {: RESULT = new Ecrire(e, eleft + 1) ; :}
                |
                    IDF:i EGAL EXP:e POINTVIRGULE
                    {: RESULT = new Affectation(new Identifiant(i,ileft+1), e, eleft+1) ; :}
                |
                    RETOURNE EXP:e POINTVIRGULE
                    {: RESULT =new Retourne(eleft+1, e); :}
                ;


EXP    ::=     CSTENTIERE:c
                {: RESULT = new ConstanteEntiere(c, cleft + 1) ; :}
                |
                IDF:i
                {: RESULT = new Identifiant(i, ileft + 1) ; :}
                |
                CSTBOOLEEN:c
                {: RESULT = new ConstanteBooleene(c , cleft +1); :}
                |
                IDF:i POUVRANTE PFERMANTE
                {: RESULT = new AppelFonction(new Identifiant(i, ileft + 1 ),ileft+1) ; :}
                 ;


TYPE   ::=     ENTIER
               {: RESULT = "entier"; :}
               |
               BOOLEEN
               {: RESULT = "booleen"; :}
               ;


FONC    ::=    TYPE:t IDF:i PARAM DEBUT LINST:li FIN
                    {: TDS.getInstance().ajouter(new Entree(i), new Symbole(t, ileft+1));
                    ListeFonctions.getInstance().ajouter(new Fonction(li, ileft+1, i));:}
                ;


DCL     ::=    TYPE:t IDF:i POINTVIRGULE
                {: TDS.getInstance().ajouter(new Entree(i), new Symbole(t)) ;:}
                ;



PARAM    ::=   POUVRANTE PFERMANTE
               {: :}
               ;